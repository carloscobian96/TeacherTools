exec("""\nimport urllib.request\nfrom Beer import Beer\nimport json\nimport string\nimport ssl\n\n#prevent error\nssl._create_default_https_context = ssl._create_unverified_context\n\n#format word with spaces between letters\ndef tempFormat(temp):\n  #declare variable\n  tempFormat=""\n  #for loop for letter in word\n  for i in range(len(temp)):\n    #append letter and space\n    tempFormat = tempFormat + f"{temp[i]} "\n  #return formatted\n  return tempFormat\n      \ndef getWord():\n    # This is discouraged but it will avoid certificate validation (prevents error)\n    # This is the URL from which we will request the data\n    beerURL = "https://random-data-api.com/api/beer/random_beer"\n \n    # Loop over JSON items and Deserialize them into python objects\n    req = urllib.request.Request(beerURL)\n    requestData = json.loads(urllib.request.urlopen(req).read())\n    # Deserialize into class\n    current_beer:Beer = Beer(**requestData)\n    #make array from words in name\n    name = current_beer.name.split()\n    #return first word of the name\n    return name[0]\n\ndef printWord(word):\n  #X used to keep track of incorrect guessed// starts at one because 0 is the first step\n  x=1\n  #print starting step\n  print(steps[0])\n  #list of all letters in lowercase\n  letters = list(string.ascii_lowercase)\n  #an arr of all the letters in the word\n  lettersInWord = list(word)\n  #arr of letter guessed\n  lettersGuessed = []\n  #temp is the temporary variable of the word, corrects letters are there, while letters not guessed are an underscore\n  temp:str= ("_" * len(word))\n  #prints temp with a space between each underscore\n  print(tempFormat(temp))\n  #for letter in word:\n  while True:\n    #input guessed letter\n    letter = input("Input Guess: ").lower()\n    #check if input is not in letter\n    if letter not in letters:\n      #if not ask user to input letter\n      print("Please input letter.")\n    #check if letter has been guessed\n    elif letter in lettersGuessed:\n      #if has been guessed ask user to input new letter\n      print("Already guessed that")\n\n    #check if letter is in word\n    elif letter in lettersInWord:\n      #append to guessed letters\n      lettersGuessed.append(letter)\n      #print formatted temp for user to read\n      print(tempFormat(temp))\n      #affirm user letter is in word\n      print("Letter in word")\n      #remind user of guessed words\n      \n      #replace letter in each ocurrance\n      for i in range(len(lettersInWord)):\n        #check if letter is in that place\n        if letter == lettersInWord[i]:\n          #replace underscore with letter\n          temp = temp[:i] + lettersInWord[i] + temp[i + 1:]\n          \n          #check if temp is equal to word\n          if temp==word:\n            #print final word formatted\n            print(tempFormat(temp))\n            #return game won\n            return 'Game won!'\n\n      print(tempFormat(temp))\n\n    #If letter not in word nor in letters guessed\n    else:\n      #tell user letter is incorrect\n      print("Letter not in word")\n      #print next step in hangman\n      print(steps[x])\n      #add one to incorrect guesses\n      x+=1\n      #append guess to letters guessed\n      lettersGuessed.append(letter)\n      #print formatted temp\n      print(tempFormat(temp))\n      #remind user of letters guessed\n      myVar = str(lettersGuessed).replace("[", " ").replace("]", " ")\n      print(f"Letters guessed: {myVar}")\n    #if incorrect guessed above 6, the game is lost\n    if x>6:\n      print(word)\n      return 'Game Lost'\n        \nsteps = [\"\"\"\n  -----\n|  |   \n|      \n|      \n|      \n|      \n=========\n\"\"\", \"\"\"\n  -----\n|  |   \n|  ðŸ˜¢   \n|      \n|      \n|      \n=========\n\"\"\", \"\"\"\n  -----\n|  |   \n|  ðŸ˜¢   \n|  |   \n|      \n|      \n=========\n\"\"\", \"\"\"\n  -----\n|  |  \n|  ðŸ˜¢   \n| /|   \n|      \n|      \n=========\n\"\"\", \"\"\"\n  -----\n|  |   \n|  ðŸ˜¢   \n| /|\\  \n|      \n|      \n=========\n\"\"\", \"\"\"\n  -----\n|  |   \n|  ðŸ˜¢   \n| /|\\  \n| /    \n|      \n=========\n\"\"\", \"\"\"\n  -----\n|  |   \n|  ðŸ˜¢   \n| /|\\  \n| / \\  \n|      \n=========\n\"\"\"]\n\n#restart game\nwhile True:\n  print("New Game")\n  #lowercase word\n  word = getWord().lower()\n  print(printWord(word))\n""")